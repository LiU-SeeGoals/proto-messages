/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.9-dev */

#ifndef PB_ROBOT_ACTION_PB_H_INCLUDED
#define PB_ROBOT_ACTION_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* Enum for different types of actions */
typedef enum _ActionType {
    ActionType_KICK_ACTION = 0,
    ActionType_STOP_ACTION = 1,
    ActionType_MOVE_TO_ACTION = 2,
    ActionType_INIT_ACTION = 3,
    ActionType_MOVE_ACTION = 4,
    ActionType_ROTATE_ACTION = 5,
    ActionType_PING = 6
} ActionType;

/* Struct definitions */
/* Structure for 3D vector */
typedef struct _Vector3D {
    int32_t x;
    int32_t y;
    float w;
} Vector3D;

/* Structure for 2D vector */
typedef struct _Vector2D {
    int32_t x;
    int32_t y;
} Vector2D;

typedef struct _Command {
    ActionType command_id;
    int32_t robot_id;
    int32_t kick_speed;
    bool has_pos;
    Vector3D pos;
    bool has_dest;
    Vector3D dest;
    bool has_direction;
    Vector2D direction;
    int32_t angular_vel; /* Negative value rotates robot clockwise */
} Command;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _ActionType_MIN ActionType_KICK_ACTION
#define _ActionType_MAX ActionType_PING
#define _ActionType_ARRAYSIZE ((ActionType)(ActionType_PING+1))

#define Command_command_id_ENUMTYPE ActionType




/* Initializer values for message structs */
#define Command_init_default                     {_ActionType_MIN, 0, 0, false, Vector3D_init_default, false, Vector3D_init_default, false, Vector2D_init_default, 0}
#define Vector3D_init_default                    {0, 0, 0}
#define Vector2D_init_default                    {0, 0}
#define Command_init_zero                        {_ActionType_MIN, 0, 0, false, Vector3D_init_zero, false, Vector3D_init_zero, false, Vector2D_init_zero, 0}
#define Vector3D_init_zero                       {0, 0, 0}
#define Vector2D_init_zero                       {0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define Vector3D_x_tag                           1
#define Vector3D_y_tag                           2
#define Vector3D_w_tag                           3
#define Vector2D_x_tag                           1
#define Vector2D_y_tag                           2
#define Command_command_id_tag                   1
#define Command_robot_id_tag                     2
#define Command_kick_speed_tag                   3
#define Command_pos_tag                          4
#define Command_dest_tag                         5
#define Command_direction_tag                    6
#define Command_angular_vel_tag                  7

/* Struct field encoding specification for nanopb */
#define Command_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    command_id,        1) \
X(a, STATIC,   SINGULAR, INT32,    robot_id,          2) \
X(a, STATIC,   SINGULAR, INT32,    kick_speed,        3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  pos,               4) \
X(a, STATIC,   OPTIONAL, MESSAGE,  dest,              5) \
X(a, STATIC,   OPTIONAL, MESSAGE,  direction,         6) \
X(a, STATIC,   SINGULAR, INT32,    angular_vel,       7)
#define Command_CALLBACK NULL
#define Command_DEFAULT NULL
#define Command_pos_MSGTYPE Vector3D
#define Command_dest_MSGTYPE Vector3D
#define Command_direction_MSGTYPE Vector2D

#define Vector3D_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    x,                 1) \
X(a, STATIC,   SINGULAR, INT32,    y,                 2) \
X(a, STATIC,   SINGULAR, FLOAT,    w,                 3)
#define Vector3D_CALLBACK NULL
#define Vector3D_DEFAULT NULL

#define Vector2D_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    x,                 1) \
X(a, STATIC,   SINGULAR, INT32,    y,                 2)
#define Vector2D_CALLBACK NULL
#define Vector2D_DEFAULT NULL

extern const pb_msgdesc_t Command_msg;
extern const pb_msgdesc_t Vector3D_msg;
extern const pb_msgdesc_t Vector2D_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Command_fields &Command_msg
#define Vector3D_fields &Vector3D_msg
#define Vector2D_fields &Vector2D_msg

/* Maximum encoded size of messages (where known) */
#define Command_size                             117
#define ROBOT_ACTION_PB_H_MAX_SIZE               Command_size
#define Vector2D_size                            22
#define Vector3D_size                            27

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
