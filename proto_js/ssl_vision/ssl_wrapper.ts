// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v3.12.4
// source: ssl_vision/ssl_wrapper.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { SSLDetectionFrame } from "./ssl_vision_detection";
import { SSLGeometryData } from "./ssl_vision_geometry";

export const protobufPackage = "";

export interface SSLWrapperPacket {
  detection?: SSLDetectionFrame | undefined;
  geometry?: SSLGeometryData | undefined;
}

function createBaseSSLWrapperPacket(): SSLWrapperPacket {
  return { detection: undefined, geometry: undefined };
}

export const SSLWrapperPacket = {
  encode(message: SSLWrapperPacket, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.detection !== undefined) {
      SSLDetectionFrame.encode(message.detection, writer.uint32(10).fork()).ldelim();
    }
    if (message.geometry !== undefined) {
      SSLGeometryData.encode(message.geometry, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SSLWrapperPacket {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSSLWrapperPacket();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.detection = SSLDetectionFrame.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.geometry = SSLGeometryData.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SSLWrapperPacket {
    return {
      detection: isSet(object.detection) ? SSLDetectionFrame.fromJSON(object.detection) : undefined,
      geometry: isSet(object.geometry) ? SSLGeometryData.fromJSON(object.geometry) : undefined,
    };
  },

  toJSON(message: SSLWrapperPacket): unknown {
    const obj: any = {};
    if (message.detection !== undefined) {
      obj.detection = SSLDetectionFrame.toJSON(message.detection);
    }
    if (message.geometry !== undefined) {
      obj.geometry = SSLGeometryData.toJSON(message.geometry);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SSLWrapperPacket>, I>>(base?: I): SSLWrapperPacket {
    return SSLWrapperPacket.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SSLWrapperPacket>, I>>(object: I): SSLWrapperPacket {
    const message = createBaseSSLWrapperPacket();
    message.detection = (object.detection !== undefined && object.detection !== null)
      ? SSLDetectionFrame.fromPartial(object.detection)
      : undefined;
    message.geometry = (object.geometry !== undefined && object.geometry !== null)
      ? SSLGeometryData.fromPartial(object.geometry)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
