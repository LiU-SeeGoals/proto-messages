// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v3.12.4
// source: robot_action/robot_action.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";

export const protobufPackage = "";

/** Enum for different types of actions */
export enum ActionType {
  KICK_ACTION = 0,
  STOP_ACTION = 1,
  MOVE_TO_ACTION = 2,
  INIT_ACTION = 3,
  MOVE_ACTION = 4,
  ROTATE_ACTION = 5,
  PING = 6,
  UNRECOGNIZED = -1,
}

export function actionTypeFromJSON(object: any): ActionType {
  switch (object) {
    case 0:
    case "KICK_ACTION":
      return ActionType.KICK_ACTION;
    case 1:
    case "STOP_ACTION":
      return ActionType.STOP_ACTION;
    case 2:
    case "MOVE_TO_ACTION":
      return ActionType.MOVE_TO_ACTION;
    case 3:
    case "INIT_ACTION":
      return ActionType.INIT_ACTION;
    case 4:
    case "MOVE_ACTION":
      return ActionType.MOVE_ACTION;
    case 5:
    case "ROTATE_ACTION":
      return ActionType.ROTATE_ACTION;
    case 6:
    case "PING":
      return ActionType.PING;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ActionType.UNRECOGNIZED;
  }
}

export function actionTypeToJSON(object: ActionType): string {
  switch (object) {
    case ActionType.KICK_ACTION:
      return "KICK_ACTION";
    case ActionType.STOP_ACTION:
      return "STOP_ACTION";
    case ActionType.MOVE_TO_ACTION:
      return "MOVE_TO_ACTION";
    case ActionType.INIT_ACTION:
      return "INIT_ACTION";
    case ActionType.MOVE_ACTION:
      return "MOVE_ACTION";
    case ActionType.ROTATE_ACTION:
      return "ROTATE_ACTION";
    case ActionType.PING:
      return "PING";
    case ActionType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Command {
  commandId: ActionType;
  robotId: number;
  kickSpeed: number;
  pos: Vector3D | undefined;
  dest: Vector3D | undefined;
  direction:
    | Vector2D
    | undefined;
  /** Negative value rotates robot clockwise */
  angularVel: number;
}

/** Structure for 3D vector */
export interface Vector3D {
  x: number;
  y: number;
  w: number;
}

/** Structure for 2D vector */
export interface Vector2D {
  x: number;
  y: number;
}

function createBaseCommand(): Command {
  return {
    commandId: 0,
    robotId: 0,
    kickSpeed: 0,
    pos: undefined,
    dest: undefined,
    direction: undefined,
    angularVel: 0,
  };
}

export const Command = {
  encode(message: Command, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.commandId !== 0) {
      writer.uint32(8).int32(message.commandId);
    }
    if (message.robotId !== 0) {
      writer.uint32(16).int32(message.robotId);
    }
    if (message.kickSpeed !== 0) {
      writer.uint32(24).int32(message.kickSpeed);
    }
    if (message.pos !== undefined) {
      Vector3D.encode(message.pos, writer.uint32(34).fork()).ldelim();
    }
    if (message.dest !== undefined) {
      Vector3D.encode(message.dest, writer.uint32(42).fork()).ldelim();
    }
    if (message.direction !== undefined) {
      Vector2D.encode(message.direction, writer.uint32(50).fork()).ldelim();
    }
    if (message.angularVel !== 0) {
      writer.uint32(56).int32(message.angularVel);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Command {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.commandId = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.robotId = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.kickSpeed = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pos = Vector3D.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.dest = Vector3D.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.direction = Vector2D.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.angularVel = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Command {
    return {
      commandId: isSet(object.commandId) ? actionTypeFromJSON(object.commandId) : 0,
      robotId: isSet(object.robotId) ? globalThis.Number(object.robotId) : 0,
      kickSpeed: isSet(object.kickSpeed) ? globalThis.Number(object.kickSpeed) : 0,
      pos: isSet(object.pos) ? Vector3D.fromJSON(object.pos) : undefined,
      dest: isSet(object.dest) ? Vector3D.fromJSON(object.dest) : undefined,
      direction: isSet(object.direction) ? Vector2D.fromJSON(object.direction) : undefined,
      angularVel: isSet(object.angularVel) ? globalThis.Number(object.angularVel) : 0,
    };
  },

  toJSON(message: Command): unknown {
    const obj: any = {};
    if (message.commandId !== 0) {
      obj.commandId = actionTypeToJSON(message.commandId);
    }
    if (message.robotId !== 0) {
      obj.robotId = Math.round(message.robotId);
    }
    if (message.kickSpeed !== 0) {
      obj.kickSpeed = Math.round(message.kickSpeed);
    }
    if (message.pos !== undefined) {
      obj.pos = Vector3D.toJSON(message.pos);
    }
    if (message.dest !== undefined) {
      obj.dest = Vector3D.toJSON(message.dest);
    }
    if (message.direction !== undefined) {
      obj.direction = Vector2D.toJSON(message.direction);
    }
    if (message.angularVel !== 0) {
      obj.angularVel = Math.round(message.angularVel);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Command>, I>>(base?: I): Command {
    return Command.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Command>, I>>(object: I): Command {
    const message = createBaseCommand();
    message.commandId = object.commandId ?? 0;
    message.robotId = object.robotId ?? 0;
    message.kickSpeed = object.kickSpeed ?? 0;
    message.pos = (object.pos !== undefined && object.pos !== null) ? Vector3D.fromPartial(object.pos) : undefined;
    message.dest = (object.dest !== undefined && object.dest !== null) ? Vector3D.fromPartial(object.dest) : undefined;
    message.direction = (object.direction !== undefined && object.direction !== null)
      ? Vector2D.fromPartial(object.direction)
      : undefined;
    message.angularVel = object.angularVel ?? 0;
    return message;
  },
};

function createBaseVector3D(): Vector3D {
  return { x: 0, y: 0, w: 0 };
}

export const Vector3D = {
  encode(message: Vector3D, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.x !== 0) {
      writer.uint32(8).int32(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(16).int32(message.y);
    }
    if (message.w !== 0) {
      writer.uint32(29).float(message.w);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Vector3D {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVector3D();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.x = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.y = reader.int32();
          continue;
        case 3:
          if (tag !== 29) {
            break;
          }

          message.w = reader.float();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Vector3D {
    return {
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
      w: isSet(object.w) ? globalThis.Number(object.w) : 0,
    };
  },

  toJSON(message: Vector3D): unknown {
    const obj: any = {};
    if (message.x !== 0) {
      obj.x = Math.round(message.x);
    }
    if (message.y !== 0) {
      obj.y = Math.round(message.y);
    }
    if (message.w !== 0) {
      obj.w = message.w;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Vector3D>, I>>(base?: I): Vector3D {
    return Vector3D.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Vector3D>, I>>(object: I): Vector3D {
    const message = createBaseVector3D();
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    message.w = object.w ?? 0;
    return message;
  },
};

function createBaseVector2D(): Vector2D {
  return { x: 0, y: 0 };
}

export const Vector2D = {
  encode(message: Vector2D, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.x !== 0) {
      writer.uint32(8).int32(message.x);
    }
    if (message.y !== 0) {
      writer.uint32(16).int32(message.y);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Vector2D {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVector2D();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.x = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.y = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Vector2D {
    return {
      x: isSet(object.x) ? globalThis.Number(object.x) : 0,
      y: isSet(object.y) ? globalThis.Number(object.y) : 0,
    };
  },

  toJSON(message: Vector2D): unknown {
    const obj: any = {};
    if (message.x !== 0) {
      obj.x = Math.round(message.x);
    }
    if (message.y !== 0) {
      obj.y = Math.round(message.y);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Vector2D>, I>>(base?: I): Vector2D {
    return Vector2D.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Vector2D>, I>>(object: I): Vector2D {
    const message = createBaseVector2D();
    message.x = object.x ?? 0;
    message.y = object.y ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
