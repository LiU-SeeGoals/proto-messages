// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v3.12.4
// source: website/website.proto

/* eslint-disable */
import * as _m0 from "protobufjs/minimal";
import { Command } from "../robot_action/robot_action";
import { SimulatorCommand } from "../simulation/ssl_simulation_control";
import { SSLWrapperPacket } from "../ssl_vision/ssl_wrapper";

export const protobufPackage = "";

export interface WebsiteCommand {
  control?: SSLWrapperPacket | undefined;
  config?: SimulatorCommand | undefined;
  ActionCommands: Command[];
  logMessages: string[];
}

function createBaseWebsiteCommand(): WebsiteCommand {
  return { control: undefined, config: undefined, ActionCommands: [], logMessages: [] };
}

export const WebsiteCommand = {
  encode(message: WebsiteCommand, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.control !== undefined) {
      SSLWrapperPacket.encode(message.control, writer.uint32(10).fork()).ldelim();
    }
    if (message.config !== undefined) {
      SimulatorCommand.encode(message.config, writer.uint32(18).fork()).ldelim();
    }
    for (const v of message.ActionCommands) {
      Command.encode(v!, writer.uint32(26).fork()).ldelim();
    }
    for (const v of message.logMessages) {
      writer.uint32(34).string(v!);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): WebsiteCommand {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebsiteCommand();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.control = SSLWrapperPacket.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.config = SimulatorCommand.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.ActionCommands.push(Command.decode(reader, reader.uint32()));
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.logMessages.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebsiteCommand {
    return {
      control: isSet(object.control) ? SSLWrapperPacket.fromJSON(object.control) : undefined,
      config: isSet(object.config) ? SimulatorCommand.fromJSON(object.config) : undefined,
      ActionCommands: globalThis.Array.isArray(object?.ActionCommands)
        ? object.ActionCommands.map((e: any) => Command.fromJSON(e))
        : [],
      logMessages: globalThis.Array.isArray(object?.logMessages)
        ? object.logMessages.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: WebsiteCommand): unknown {
    const obj: any = {};
    if (message.control !== undefined) {
      obj.control = SSLWrapperPacket.toJSON(message.control);
    }
    if (message.config !== undefined) {
      obj.config = SimulatorCommand.toJSON(message.config);
    }
    if (message.ActionCommands?.length) {
      obj.ActionCommands = message.ActionCommands.map((e) => Command.toJSON(e));
    }
    if (message.logMessages?.length) {
      obj.logMessages = message.logMessages;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WebsiteCommand>, I>>(base?: I): WebsiteCommand {
    return WebsiteCommand.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WebsiteCommand>, I>>(object: I): WebsiteCommand {
    const message = createBaseWebsiteCommand();
    message.control = (object.control !== undefined && object.control !== null)
      ? SSLWrapperPacket.fromPartial(object.control)
      : undefined;
    message.config = (object.config !== undefined && object.config !== null)
      ? SimulatorCommand.fromPartial(object.config)
      : undefined;
    message.ActionCommands = object.ActionCommands?.map((e) => Command.fromPartial(e)) || [];
    message.logMessages = object.logMessages?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
